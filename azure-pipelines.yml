# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  branches:
    include:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: MyGitHub_splitman2run # The name used to reference this repository in the checkout step
      type: github
      endpoint: lezhumain
      name: lezhumain/SplitMan2-run

stages:
  - stage: Deploy
    jobs:
      - job: Deploy_Docker_Containers
        steps:
          - checkout: MyGitHub_splitman2run

          - task: DownloadSecureFile@1
            name: sshKey
            displayName: 'Download SSH key'
            inputs:
              secureFile: 'id_releaseUser'

          - script: |
              echo "$(whoami)"
              #sudo chown "$(whoami)":root "$(sshKey.secureFilePath)"
              #sudo chmod 600 "$(sshKey.secureFilePath)"
              TARGET_DIR="/home/$(whoami)/.ssh"
              echo "TARGET_DIR: $TARGET_DIR"
              mkdir -p "$TARGET_DIR"
              sudo cp "$(sshKey.secureFilePath)" "$TARGET_DIR/id_releaseUser"
              sudo chmod 600 "$TARGET_DIR/id_releaseUser"
              sudo chown -R "$(whoami)" "$TARGET_DIR"
            displayName: 'Prepare SSH key'

          - script: |
              # add ssh in config
              FILE="$HOME/.ssh/config"
              tee -a "$FILE" > /dev/null <<EOT
              Host ovhVM_rel
                HostName "$(DEBIAN_IP)"
                User "$(DEBIAN_USER)"
                IdentityFile "$HOME/.ssh/id_releaseUser"
                Port 22
                PreferredAuthentications publickey
              EOT

              # add key to agent ?
              eval "$(ssh-agent -s)" && ssh-add "$HOME/.ssh/id_releaseUser"
              echo "Added key to agent"

              if [ ! -f "$HOME/.ssh/known_hosts" ]; then
                touch "$HOME/.ssh/known_hosts"
              fi
              ssh-keyscan -t rsa 79.137.33.77 >> "$HOME/.ssh/known_hosts"
              cat "$HOME/.ssh/known_hosts"
            env:
              DEBIAN_USER: $(DEBIAN_USER)
              DEBIAN_IP: $(DEBIAN_IP)
            displayName: 'Setup SSH access'

          - script: |
              chmod +x SplitMan2-run/*.sh
              chmod +x SplitMan2-run/*.sh
              ls -al "$HOME/.ssh"
              cat "$HOME/.ssh/config"
              bash SplitMan2-run/backup_current.sh
            env:
              DEBIAN_PATH: $(DEBIAN_PATH)
            displayName: 'Backup current'

          - script: |
              #chmod +x SplitMan2-run/*.sh
              #chmod +x SplitMan2-run/*.sh
              bash SplitMan2-run/build_containers.sh "SplitMan2-API"
            env:
              DEBIAN_PATH: $(DEBIAN_PATH)
              DEBIAN_IP: $(DEBIAN_IP)
              MONGO_USER: $(MONGO_USER)
              MONGO_PASS: $(MONGO_PASS)
            displayName: 'Build containers'

          - script: |
              bash SplitMan2-run/run_containers.sh
            env:
              DEBIAN_PATH: $(DEBIAN_PATH)
            displayName: 'Run containers'

          - script: |
              bash SplitMan2-run/setup_db.sh
            env:
              DEBIAN_IP: $(DEBIAN_IP)
              DEBIAN_PATH: $(DEBIAN_PATH)
            displayName: 'Setup DB'

  - stage: Run_E2E
    jobs:
      - job: Run_E2E_Tests
        steps:
          - script: |
              VERSION="$(curl --insecure -s "https://79.137.33.77:8081/api/version")"
              if [ "$VERSION" == "TODO" ]; then
                echo "api /version OK"
              else
                echo "api /version FAILED"
                exit 1
              fi

              ITEMS_COUNT="$(curl --insecure -s "https://79.137.33.77:8081/api/itemCount")"
              if (($ITEMS_COUNT>=0)); then
                echo "api /itemCount OK"
              else
                echo "api /itemCount FAILED"
                exit 1
              fi

              MAIN_PAGE="$(curl --insecure -s "https://79.137.33.77:8081/")"
              if [[ "$MAIN_PAGE" == *"SplitMan21"* ]]; then
                echo "web / OK"
              else
                echo "web / FAILED"
                exit 1
              fi

              #LOGIN_PAGE="$(curl --insecure -s "https://79.137.33.77:8081/login")"
              #if [[ "$LOGIN_PAGE" == *"SplitMan21"* ]]; then
              #  echo "web /login OK"
              #else
              #  echo "web /login FAILED"
              #  echo "$LOGIN_PAGE"
              #  exit 1
              #fi
            env:
              DEBIAN_IP: $(DEBIAN_IP)
            displayName: 'Test endpoints'

          - script: |
              HOST_IP="${DEBIAN_IP}"
              npm install -g npm@9.3.0
              npm i
              npm run e2e -- --headless=true --host="$HOST_IP:8081"
            env:
              DEBIAN_IP: $(DEBIAN_IP)
            displayName: 'Run E2E Tests'
